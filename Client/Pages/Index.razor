@page "/"
@using NDAProcesses.Shared.Models
@inject IHeatTreatService HeatTreatService

<PageTitle>Heat Treat Verification Measurements</PageTitle>

<div class="page-header">
    <RadzenHeading Size="H2" Text="Heat Treat Verification Measurements"></RadzenHeading>
    <RadzenText Text="Complete the verification form and capture measurements directly in the browser." Style="display:block; margin-top: 0.25rem;" />
</div>

@if (_isLoading)
{
    <div class="heat-treat-loading">
        <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" Style="width: 320px;" />
        <RadzenText Text="Loading part libraryâ€¦" Style="margin-top: 0.5rem;" />
    </div>
}
else if (!string.IsNullOrWhiteSpace(_loadError))
{
    <RadzenAlert Severity="AlertSeverity.Error" Style="margin-top: 1rem;">@_loadError</RadzenAlert>
}
else
{
    <div class="heat-treat-layout">
        <RadzenCard Class="heat-treat-section">
            <HeaderTemplate>General Information</HeaderTemplate>
            <ChildContent>
                <div class="heat-treat-grid">
                    <div class="heat-treat-field">
                        <RadzenLabel Text="Date" />
                        <RadzenDatePicker @bind-Value="_form.Date" Style="width: 100%;" />
                    </div>
                    <div class="heat-treat-field">
                        <RadzenLabel Text="Time" />
                        <RadzenTimePicker @bind-Value="_form.Time" Style="width: 100%;" />
                    </div>
                    <div class="heat-treat-field">
                        <RadzenLabel Text="Inspector" />
                        <RadzenTextBox @bind-Value="_form.Inspector" Style="width: 100%;" />
                    </div>
                    <div class="heat-treat-field">
                        <RadzenLabel Text="Shift" />
                        <RadzenDropDown Data="_shiftOptions" @bind-Value="_form.Shift" Style="width: 100%;" AllowClear="true" Placeholder="Select shift" />
                    </div>
                    <div class="heat-treat-field">
                        <RadzenLabel Text="Line" />
                        <RadzenDropDown Data="_lineOptions" @bind-Value="_form.Line" Style="width: 100%;" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" Placeholder="Select line" />
                    </div>
                    <div class="heat-treat-field">
                        <RadzenLabel Text="Type of Test" />
                        <RadzenDropDown Data="_testTypeOptions" @bind-Value="_form.TypeOfTest" Style="width: 100%;" AllowClear="true" Placeholder="Select type" />
                    </div>
                    <div class="heat-treat-field">
                        <RadzenLabel Text="Part Number" />
                        <RadzenDropDown Data="_records" TextProperty="PartNumber" ValueProperty="PartNumber" @bind-Value="_form.PartNumber" Change="OnPartNumberChanged" Style="width: 100%;" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Search part" />
                    </div>
                    <div class="heat-treat-field">
                        <RadzenLabel Text="Stamp Number" />
                        <RadzenTextBox @bind-Value="_form.StampNumber" Style="width: 100%;" />
                    </div>
                    <div class="heat-treat-field">
                        <RadzenLabel Text="Pass" />
                        <RadzenDropDown Data="_passOptions" @bind-Value="_form.PassStatus" Style="width: 100%;" AllowClear="true" Placeholder="Select" />
                    </div>
                    <div class="heat-treat-field">
                        <RadzenLabel Text="Adjustments Required" />
                        <RadzenTextBox @bind-Value="_form.AdjustmentsRequired" Style="width: 100%;" />
                    </div>
                    <div class="heat-treat-field">
                        <RadzenLabel Text="EddySonix Cycle (Q10)" />
                        <RadzenNumeric @bind-Value="_form.Q10" TValue="int?" Style="width: 100%;" Min="1" Max="4" Step="1" />
                    </div>
                    <div class="heat-treat-field">
                        <RadzenLabel Text="EddySonix Judgement" />
                        <RadzenTextBox @bind-Value="_form.EddysonixJudgement" Style="width: 100%;" />
                    </div>
                </div>
                <div class="heat-treat-textarea">
                    <RadzenLabel Text="Notes" />
                    <RadzenTextArea @bind-Value="_form.Notes" Style="width: 100%;" Rows="3" />
                </div>
            </ChildContent>
        </RadzenCard>

        <RadzenCard Class="heat-treat-section">
            <HeaderTemplate>Part Summary</HeaderTemplate>
            <ChildContent>
                <div class="heat-treat-summary-grid">
                    <div class="summary-item">
                        <span class="summary-label">Customer</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.Customer)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">ES Approved Program</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.EsApprovedProgram)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">EddySonix Program</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.Eddysonix)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">ADCDE (half) FG</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.AdcdeHalfFg)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">ABCDE (full) FG</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.AbcdeFullFg)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Hollow Shaft</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.HollowShaft)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">CQI Indicator (Q12)</span>
                        <span class="summary-value">@DisplayValue(ComputeCqiIndicator())</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">EddySonix Cycle Assignment (Q11)</span>
                        <span class="summary-value">@DisplayValue(ComputeQ11())</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label"># of Pieces to Scan</span>
                        <span class="summary-value">@FormatNumber(_selectedRecord?.CutPieceCount)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Special Instructions</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.SpecialInstructions)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">C to C Measure Location</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.ClipGrooveMeasureLocation)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Clip to Clip Spec</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.ClipGrooveToClipGroove)</span>
                    </div>
                </div>
            </ChildContent>
        </RadzenCard>

        <RadzenCard Class="heat-treat-section">
            <HeaderTemplate>BJ Side Measurements</HeaderTemplate>
            <ChildContent>
                <div class="heat-treat-spec">
                    <div>Non Hardened Area: <strong>@DisplayValue(_selectedRecord?.BjNonHardenedArea)</strong></div>
                    <div>@BjSplineLabel: <strong>@DisplayValue(_selectedRecord?.BjSplineOpdDisplay)</strong></div>
                </div>
                <table class="heat-treat-table">
                    <thead>
                        <tr>
                            <th>Position</th>
                            <th>Non Hardened Area</th>
                            <th>@BjSplineLabel</th>
                            <th>Bottom SPLINE O.P.D.</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var measurement in _bjMeasurements)
                        {
                            <tr>
                                <td>@measurement.Position</td>
                                <td>
                                    <RadzenNumeric @bind-Value="measurement.NonHardened" TValue="decimal?" Style="width: 100%;" Step="0.001" />
                                </td>
                                <td>
                                    <RadzenNumeric @bind-Value="measurement.TopSpline" TValue="decimal?" Style="width: 100%;" Step="0.001" />
                                </td>
                                <td>
                                    <RadzenNumeric @bind-Value="measurement.BottomSpline" TValue="decimal?" Style="width: 100%;" Step="0.001" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </ChildContent>
        </RadzenCard>

        <RadzenCard Class="heat-treat-section">
            <HeaderTemplate>DOJ Side Measurements</HeaderTemplate>
            <ChildContent>
                <div class="heat-treat-spec">
                    <div>Non Hardened Area: <strong>@DisplayValue(_selectedRecord?.DojNonHardenedArea)</strong></div>
                    <div>@BjSplineLabel: <strong>@DisplayValue(_selectedRecord?.DojSplineOpdDisplay)</strong></div>
                </div>
                <table class="heat-treat-table">
                    <thead>
                        <tr>
                            <th>Position</th>
                            <th>Non Hardened Area</th>
                            <th>@BjSplineLabel</th>
                            <th>Bottom SPLINE O.P.D.</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var measurement in _dojMeasurements)
                        {
                            <tr>
                                <td>@measurement.Position</td>
                                <td>
                                    <RadzenNumeric @bind-Value="measurement.NonHardened" TValue="decimal?" Style="width: 100%;" Step="0.001" />
                                </td>
                                <td>
                                    <RadzenNumeric @bind-Value="measurement.TopSpline" TValue="decimal?" Style="width: 100%;" Step="0.001" />
                                </td>
                                <td>
                                    <RadzenNumeric @bind-Value="measurement.BottomSpline" TValue="decimal?" Style="width: 100%;" Step="0.001" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </ChildContent>
        </RadzenCard>

        <RadzenCard Class="heat-treat-section">
            <HeaderTemplate>Hardness &amp; Case Depth</HeaderTemplate>
            <ChildContent>
                <div class="heat-treat-spec">
                    <div>Rockwell Hardness Spec: <strong>@DisplayValue(_selectedRecord?.Hardness)</strong></div>
                    <div>Case Depth Spec: <strong>@DisplayValue(_selectedRecord?.CaseDepth)</strong></div>
                </div>
                <table class="heat-treat-table">
                    <thead>
                        <tr>
                            <th>Point</th>
                            <th>Measurement</th>
                            <th>Pass?</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var point in _hardnessPoints)
                        {
                            <tr>
                                <td>@point.Position</td>
                                <td>
                                    <RadzenNumeric @bind-Value="point.Value" TValue="decimal?" Style="width: 100%;" Step="0.1" />
                                </td>
                                <td>
                                    <RadzenCheckBox @bind-Value="point.Pass" TriState="true" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </ChildContent>
        </RadzenCard>

        <RadzenCard Class="heat-treat-section">
            <HeaderTemplate>Gauges &amp; Fixtures</HeaderTemplate>
            <ChildContent>
                <div class="heat-treat-summary-grid">
                    <div class="summary-item">
                        <span class="summary-label">BJ Spline Gauge</span>
                        <span class="summary-value">@DisplayValue(FormatNumber(_selectedRecord?.BjSplineOpdNominal, includePlusMinus: true, tolerance: _selectedRecord?.BjSplineOpdTolerance))</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">DOJ Spline Gauge</span>
                        <span class="summary-value">@DisplayValue(FormatNumber(_selectedRecord?.DojSplineOpdNominal, includePlusMinus: true, tolerance: _selectedRecord?.DojSplineOpdTolerance))</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">BJ Clip Ring Gauge</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.BjClipRingGauge)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">DOJ Clip Ring Gauge</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.DojClipRingGauge)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">BJ H Gauge</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.BjHGauge)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">DOJ H Gauge</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.DojHGauge)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">BJ Clip Width</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.BjClipWidth)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">DOJ Clip Width</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.DojClipWidth)</span>
                    </div>
                </div>
            </ChildContent>
        </RadzenCard>

        <RadzenCard Class="heat-treat-section">
            <HeaderTemplate>EddySonix Setup</HeaderTemplate>
            <ChildContent>
                <div class="heat-treat-summary-grid">
                    <div class="summary-item">
                        <span class="summary-label">Scan Required</span>
                        <span class="summary-value">@(ScanRequired ? "Yes" : "No")</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">X Value</span>
                        <span class="summary-value">@FormatNumber(_selectedRecord?.XValue)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">V Value</span>
                        <span class="summary-value">@DisplayValue(_selectedRecord?.VValue)</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Operator Judgement</span>
                        <span class="summary-value">@DisplayValue(_form.EddysonixJudgement)</span>
                    </div>
                </div>
            </ChildContent>
        </RadzenCard>

        <RadzenCard Class="heat-treat-section">
            <HeaderTemplate>Cut &amp; Marking Dimensions</HeaderTemplate>
            <ChildContent>
                <table class="heat-treat-table">
                    <thead>
                        <tr>
                            <th>Segment</th>
                            <th>Start</th>
                            <th>End</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var segment in GetCutSegments())
                        {
                            <tr>
                                <td>@segment.Label</td>
                                <td>@DisplayValue(segment.Start)</td>
                                <td>@DisplayValue(segment.End)</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="heat-treat-marking">
                    <RadzenLabel Text="Additional Layout Notes" />
                    <RadzenTextArea @bind-Value="_form.MarkingNotes" Style="width: 100%;" Rows="3" Placeholder="Record BJ/DOJ spline patterns, cut layouts, etc." />
                </div>
            </ChildContent>
        </RadzenCard>
    </div>
}

@code {
    private readonly IReadOnlyList<string> _shiftOptions = new[] { "1ST", "2ND", "3RD" };
    private readonly IReadOnlyList<string> _testTypeOptions = new[] { "Initial", "Verification", "8HR", "Final" };
    private readonly IReadOnlyList<string> _lineOptions = new[]
    {
        "H-1", "H-2", "H-3", "H-4", "H-5", "H-6",
        "H-7", "H-8", "H-9", "H-10", "H-11", "H-12",
        "H-13", "H-14", "H-15", "H-16", "H-17", "H-18", "H-19"
    };
    private readonly IReadOnlyList<string> _passOptions = new[] { "PASS", "FAIL" };

    private readonly List<SplineMeasurement> _bjMeasurements = new()
    {
        new() { Position = "1/1L" },
        new() { Position = "2/1R" },
        new() { Position = "3/2L" },
        new() { Position = "4/2R" }
    };

    private readonly List<SplineMeasurement> _dojMeasurements = new()
    {
        new() { Position = "1/1L" },
        new() { Position = "2/1R" },
        new() { Position = "3/2L" },
        new() { Position = "4/2R" }
    };

    private readonly List<HardnessMeasurement> _hardnessPoints = new()
    {
        new("B1"),
        new("B2"),
        new("B3"),
        new("B4")
    };

    private readonly HeatTreatFormState _form = new();
    private List<HeatTreatMasterRecord> _records = new();
    private HeatTreatMasterRecord? _selectedRecord;
    private bool _isLoading = true;
    private string? _loadError;

    private static readonly HashSet<string> BjVariantTokens = new(StringComparer.OrdinalIgnoreCase) { "BJ117", "BJ125" };
    private static readonly HashSet<string> Group1 = new(StringComparer.OrdinalIgnoreCase) { "H-1", "H-2", "H-3", "H-4", "H-5" };
    private static readonly HashSet<string> Group2 = new(StringComparer.OrdinalIgnoreCase) { "H-13", "H-14", "H-15", "H-16" };
    private static readonly HashSet<string> Group3 = new(StringComparer.OrdinalIgnoreCase) { "H-17", "H-18", "H-19", "H-6" };

    private bool ScanRequired => _selectedRecord?.CutPieceCount is double count && count > 0;
    private string BjSplineLabel => HasBjVariant() ? "Top SPLINE O.P.D." : "SPLINE O.P.D.";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var records = await HeatTreatService.GetMasterRecordsAsync();
            _records = records.OrderBy(r => r.PartNumber, StringComparer.OrdinalIgnoreCase).ToList();
        }
        catch (Exception ex)
        {
            _loadError = $"Unable to load master data: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OnPartNumberChanged(object? value)
    {
        if (value is string partNumber && !string.IsNullOrWhiteSpace(partNumber))
        {
            _selectedRecord = _records.FirstOrDefault(record => string.Equals(record.PartNumber, partNumber, StringComparison.OrdinalIgnoreCase));
            _form.PartNumber = partNumber;
        }
        else
        {
            _selectedRecord = null;
            _form.PartNumber = null;
        }

        await InvokeAsync(StateHasChanged);
    }

    private bool HasBjVariant()
    {
        if (_selectedRecord?.PartNumber is not string partNumber)
        {
            return false;
        }

        return BjVariantTokens.Any(token => partNumber.Contains(token, StringComparison.OrdinalIgnoreCase));
    }

    private string? ComputeCqiIndicator()
    {
        return string.Equals(_selectedRecord?.CqiCustomer, "CQI Customer", StringComparison.OrdinalIgnoreCase) ? "1" : null;
    }

    private string? ComputeQ11()
    {
        if (!string.Equals(_selectedRecord?.CqiCustomer, "Non-CQI Customer", StringComparison.OrdinalIgnoreCase))
        {
            return null;
        }

        if (!string.Equals(_form.TypeOfTest, "8HR", StringComparison.OrdinalIgnoreCase))
        {
            return null;
        }

        var shift = (_form.Shift ?? string.Empty).Trim().ToUpperInvariant();
        var line = (_form.Line ?? string.Empty).Trim().ToUpperInvariant();
        if (string.IsNullOrEmpty(shift) || string.IsNullOrEmpty(line))
        {
            return null;
        }

        var qualifies =
            (Group1.Contains(line) && shift == "2ND") ||
            (Group2.Contains(line) && shift == "3RD") ||
            (Group3.Contains(line) && shift == "1ST") ||
            (Group1.Contains(line) && shift == "3RD") ||
            (Group2.Contains(line) && shift == "1ST") ||
            (Group3.Contains(line) && shift == "2ND");

        if (!qualifies)
        {
            return null;
        }

        var branchOne =
            (Group1.Contains(line) && shift == "2ND") ||
            (Group2.Contains(line) && shift == "3RD") ||
            (Group3.Contains(line) && shift == "1ST");

        return branchOne ? _form.Q10 switch
        {
            2 => "1",
            1 => "2",
            _ => null
        } : _form.Q10 switch
        {
            2 => "3",
            1 => "4",
            _ => null
        };
    }

    private IEnumerable<(string Label, string? Start, string? End)> GetCutSegments()
    {
        if (_selectedRecord is null)
        {
            yield break;
        }

        yield return ("A", _selectedRecord.AStart, _selectedRecord.AEnd);
        yield return ("B", _selectedRecord.BStart, _selectedRecord.BEnd);
        yield return ("C", _selectedRecord.CStart, _selectedRecord.CEnd);
        yield return ("D", _selectedRecord.DStart, _selectedRecord.DEnd);
        yield return ("E", _selectedRecord.EStart, _selectedRecord.EEnd);
        yield return ("F", _selectedRecord.FStart, _selectedRecord.FEnd);
        yield return ("G", _selectedRecord.GStart, _selectedRecord.GEnd);
        yield return ("H", _selectedRecord.HStart, _selectedRecord.HEnd);
        yield return ("I", _selectedRecord.IStart, _selectedRecord.IEnd);
    }

    private static string DisplayValue(string? value)
    {
        return string.IsNullOrWhiteSpace(value) ? "--" : value;
    }

    private static string DisplayValue(decimal? value)
    {
        return value.HasValue ? value.Value.ToString("0.###") : "--";
    }

    private static string FormatNumber(double? value, bool includePlusMinus = false, double? tolerance = null)
    {
        if (!value.HasValue)
        {
            return "--";
        }

        if (!includePlusMinus || !tolerance.HasValue)
        {
            return value.Value.ToString("0.###");
        }

        return $"{value.Value:0.###} Â± {tolerance.Value:0.###}";
    }

    private record SplineMeasurement
    {
        public string Position { get; init; } = string.Empty;
        public decimal? NonHardened { get; set; }
        public decimal? TopSpline { get; set; }
        public decimal? BottomSpline { get; set; }
    }

    private record HardnessMeasurement(string Position)
    {
        public decimal? Value { get; set; }
        public bool? Pass { get; set; }
    }

    private class HeatTreatFormState
    {
        public DateTime Date { get; set; } = DateTime.Today;
        public TimeSpan Time { get; set; } = DateTime.Now.TimeOfDay;
        public string? Inspector { get; set; }
        public string? Shift { get; set; }
        public string? Line { get; set; }
        public string? TypeOfTest { get; set; }
        public string? PartNumber { get; set; }
        public string? StampNumber { get; set; }
        public string? PassStatus { get; set; }
        public string? AdjustmentsRequired { get; set; }
        public int? Q10 { get; set; }
        public string? EddysonixJudgement { get; set; }
        public string? Notes { get; set; }
        public string? MarkingNotes { get; set; }
    }
}
